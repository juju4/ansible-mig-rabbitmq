---

- include: travis.yml

- debug: var=certificate_cn

- name: Ensure openssl is installed
  package: name=openssl state=present

- name: RabbitMQ openssl configuration
  template: src=openssl.cnf dest={{ mig_home }}/rabbitmq-openssl.cnf mode=0600 owner={{ mig_user }}

- name: Ensure appropriate permissions and owner
  file: dest="{{ item }}" state=directory mode=0711 owner="{{ mig_user }}"
  with_items:
    - "{{ mig_rabbitmq_cadir }}"
    - "{{ mig_rabbitmq_cadir }}/certs"
    - "{{ mig_rabbitmq_serverdir }}"
    - "{{ mig_rabbitmq_clientdir }}"

- name: Check serial openssl config
  lineinfile: dest="{{ mig_rabbitmq_cadir }}/serial" line=1000 create=yes
- name: touch index openssl config
  file: dest="{{ mig_rabbitmq_cadir }}/index" state=touch

- stat: path="{{ mig_rabbitmq_servercrt }}"
  register: servercrt
- name: Create RabbitMQ certificates
  shell: "{{ item }} chdir={{ mig_home }}"
  with_items:
## certificate authority
    - "openssl req -x509 -newkey rsa:{{ mig_rabbitmq_rsakeysize }} -days {{ mig_rabbitmq_certduration }} -keyout {{ mig_rabbitmq_cakey }} -out {{ mig_rabbitmq_cacertcrt }} -subj \"{{ mig_rabbitmq_certinfo }}/CN={{ certificate_cn }}\" -extensions root_ca -config {{ mig_home }}/rabbitmq-openssl.cnf -nodes"
## server
#    - "openssl req -newkey rsa:{{ mig_rabbitmq_rsakeysize }} -days {{ mig_rabbitmq_certduration }} -keyout {{ mig_rabbitmq_serverkey }} -out {{ mig_rabbitmq_servercsr }} -subj \"{{ mig_rabbitmq_certinfo }}/CN={{ certificate_cn }}/O=RabbitMQ server/\" -nodes -config {{ mig_home }}/rabbitmq-openssl.cnf" ## interactive
    - "openssl req -newkey rsa:{{ mig_rabbitmq_rsakeysize }} -days {{ mig_rabbitmq_certduration }} -keyout {{ mig_rabbitmq_serverkey }} -out {{ mig_rabbitmq_servercsr }} -subj \"{{ mig_rabbitmq_certinfo }}/CN={{ certificate_cn }}/O=RabbitMQ server/\" -nodes"
    - "yes | openssl ca -extensions server_cert -in {{ mig_rabbitmq_servercsr }} -out {{ mig_rabbitmq_servercrt }} -config {{ mig_home }}/rabbitmq-openssl.cnf"
  become_user: "{{ mig_user }}"
  become: true
  when: not servercrt.stat.exists
  notify:
    - restart rabbitmq-server

- stat: path="{{ mig_rabbitmq_clientdir }}/agent.csr"
  register: agentcsr
- name: Create certificates for scheduler, workers and agents
  command: "openssl req -new -newkey rsa:{{ mig_rabbitmq_rsakeysize }} -keyout {{ mig_rabbitmq_clientdir }}/{{ item }}.key -nodes -out {{ mig_rabbitmq_clientdir }}/{{ item }}.csr -config {{ mig_home }}/rabbitmq-openssl.cnf -subj \"{{ mig_rabbitmq_certinfo }}/CN={{ certificate_cn }}/O={{ item }}/\""
  with_items:
    - scheduler
    - worker
    - agent
  become_user: "{{ mig_user }}"
  become: true
  when: not agentcsr.stat.exists
  notify:
    - restart rabbitmq-server

- stat: path="{{ mig_rabbitmq_clientdir }}/agent.crt"
  register: agentcrt
- debug: msg="openssl ca -extensions server_cert -in {{ mig_rabbitmq_clientdir }}/agent.csr -out {{ mig_rabbitmq_clientdir }}/agent.crt -config {{ mig_home }}/rabbitmq-openssl.cnf"
- name: Sign certificates for scheduler, workers and agents
  shell: "yes | openssl ca -extensions server_cert -in {{ mig_rabbitmq_clientdir }}/{{ item }}.csr -out {{ mig_rabbitmq_clientdir }}/{{ item }}.crt -config {{ mig_home }}/rabbitmq-openssl.cnf"
  with_items:
    - scheduler
    - worker
    - agent
  become_user: "{{ mig_user }}"
  become: true
  when: not agentcrt.stat.exists
  notify:
    - restart rabbitmq-server

## FIXME! certificate file contains fingerprint and info too...
- file: dest=/etc/rabbitmq mode=0711 state=directory
- name: synchronize rabbitmq server certificates to rabbitmq config directory
  command: "rsync -ci {{ item }} /etc/rabbitmq/"
  register: rsync_result
  changed_when: 'rsync_result.stdout != ""'
## NOK: not doing remote to remote
#  synchronize: src="{{ item }}" dest=/etc/rabbitmq/ archive=no
#  delegate_to: "{{ ansible_hostname }}"
  with_items:
    - "{{ mig_rabbitmq_cacertcrt }}"
    - "{{ mig_rabbitmq_serverkey }}"
    - "{{ mig_rabbitmq_servercrt }}"
  notify:
    - restart rabbitmq-server

- name: synchronize rabbitmq client certificates to mig config directory
## FIXME! use synchronize module too?
  command: "rsync -ci {{ item }} /etc/mig/"
  register: rsync_result
  changed_when: 'rsync_result.stdout != ""'
  with_items:
    - "{{ mig_rabbitmq_cacertcrt }}"
    - "{{ mig_rabbitmq_clientdir }}/scheduler.key"
    - "{{ mig_rabbitmq_clientdir }}/scheduler.crt"
    - "{{ mig_rabbitmq_clientdir }}/agent.key"
    - "{{ mig_rabbitmq_clientdir }}/agent.crt"

- debug: var=mig_rabbitmq_pull
- name: fetch files to orchestrator
  fetch: "src={{ item }} dest={{ mig_rabbitmq_pulldir }}/ flat=yes"
  with_items:
    - "{{ mig_rabbitmq_cacertcrt }}"
    - "{{ mig_rabbitmq_clientdir }}/scheduler.key"
    - "{{ mig_rabbitmq_clientdir }}/scheduler.crt"
    - "{{ mig_rabbitmq_clientdir }}/agent.key"
    - "{{ mig_rabbitmq_clientdir }}/agent.crt"
  when: mig_rabbitmq_pull is defined and mig_rabbitmq_pull
